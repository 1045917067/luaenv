#!/usr/bin/env bash
#
# Summary: Set or show the local application-specific Lua version
#
# Usage: luaenv local <version>
#        luaenv local --unset
#
# Sets the local application-specific Lua version by writing the
# version name to a file named `.lua-version'.
#
# When you run a Lua command, luaenv will look for a `.lua-version'
# file in the current directory and each parent directory. If no such
# file is found in the tree, luaenv will use the global Lua version
# specified with `luaenv global'. A version specified with the
# `LUAENV_VERSION' environment variable takes precedence over local
# and global versions.
#
# For backwards compatibility, luaenv will also read version
# specifications from `.luaenv-version' files, but a `.lua-version'
# file in the same directory takes precedence.
#
# <version> should be a string matching a Lua version known to luaenv.
# The special version string `system' will use your default system Lua.
# Run `luaenv versions' for a list of available Lua versions.

set -e
[ -n "$LUAENV_DEBUG" ] && set -x

# Provide luaenv completions
if [ "$1" = "--complete" ]; then
  echo --unset
  echo system
  exec luaenv-versions --bare
fi

LUAENV_VERSION="$1"

if [ "$LUAENV_VERSION" = "--unset" ]; then
  rm -f .lua-version .luaenv-version
elif [ -n "$LUAENV_VERSION" ]; then
  if [ "$(LUAENV_VERSION= luaenv-version-origin)" -ef .luaenv-version ]; then
    rm -f .luaenv-version
    { echo "luaenv: removed existing \`.luaenv-version' file and migrated"
      echo "       local version specification to \`.lua-version' file"
    } >&2
  fi
  luaenv-version-file-write .lua-version "$LUAENV_VERSION"
else
  luaenv-version-file-read .lua-version ||
  luaenv-version-file-read .luaenv-version ||
  { echo "luaenv: no local version configured for this directory"
    exit 1
  } >&2
fi
